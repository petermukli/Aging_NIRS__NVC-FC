%%% MAIN SCRIPT for analysis of static functional connectivity %%%
% Written by Peter Mukli

%% Add path

addpath('Preprocess')
addpath('Analysis');
addpath('Analysis\2015_01_25 BCT')
load('channel_info.mat');

mypath = pwd;
 
%% Declarations

Fs=3.90625; % sampling frequency

% bandpass filtering
l_p = 0.0045; % lower cutoff
h_p = 0.4; % upper cutoff
fltn = 'B4_-_B1'; 

% preprocess
mn_p = {'cui_filt'};
% mn_p = {'nocui_nofilt', 'cui_nofilt', 'nocui_filt', 'cui_filt'};
mn_m = {'pearson'};
% mn_m = {'pearson', 'spearman', 'hilbert_r', 'hilbert_pli' 'hilbert_c'};

igotthis = dir('.\Data_raw\CN*');
ID = zeros(1, length(igotthis));
for i = 1 : length(igotthis)
    ID(i) = str2double(igotthis(i).name(3:end));
end
clear i igotthis

%% Load chromofor data

load('.\NIRS_preprocessed_individual\NIRS_data__preprocessed.mat')

ID2 = [];
j=0;
for i = 1 : length(chromofor)
    if size(chromofor(i).nback, 2)==4
        j = j + 1;
        ID2(j)=i;
    end
end


%% Preallocations %%


konnekt_param = struct('density_bu', [], 'density_wu', [], ...
    'clustering_bu', [], 'clustering_wu', [], ...
    'efficiency_bu', [], 'efficiency_wu', []); %cell(2,1)

metrika2 = struct(mn_m{1}, konnekt_param); % We use Pearson correlation

nback = repmat(struct('connection_matrix', repmat(struct, 4, 4)), j, 1);

metrika3 = struct('local', [], 'global', []);

din_konnekt_param1 = struct('density_bu', metrika3, 'density_wu', metrika3, ...
    'clustering_bu', metrika3, 'clustering_wu', metrika3, ...
    'efficiency_bu', metrika3, 'efficiency_wu', metrika3);


dfc_temp = struct('nback', repmat(din_konnekt_param1, 4, 4));

dfc = repmat(struct('nback', repmat(din_konnekt_param1, 4, 4)), j, 1);

clear j


%% Dynamic Functional Connectivity


for j = 1:length(ID2)
    
    try

        mydir = ['.\Data_raw\CN', sprintf('%03d', ID2(j))];
        mkdir(mydir)
     
        
        % use sliding windows with 4 different setup
        % window size and overlapping are controlled
        % non-overlapping scheme + sliding by 1 data point 
        
        % selection of window sizes
        % the number of data points in 10 seconds: 39
        slide = [39 * [1, 3, 6, 9]', ones(4, 1)];

        % case 1-4: overlap, slide = 1 datapoint
        % window sizes: 10s, 30s, 60s, 90s

        dfc_temp.age = alany(ID2(j)).age;
        dfc(j).age = alany(ID2(j)).age;
        
        for sl_i = 1 : 4

            disp(['subject: ', int2str(j), '; slide option: ',...
                int2str(sl_i)])
        
            myresult = ...
                Adjacency_calc__Pearson_cui_filt_dyn(chromofor, ID2(j), ...
                alany(ID2(j)).NCh, slide(sl_i, 1), slide(sl_i, 2));

%             nback(j) = myresult;
            nback(j).connection_matrix(1, sl_i).pearson = myresult.nback(1).pearson;
            nback(j).connection_matrix(2, sl_i).pearson = myresult.nback(2).pearson;
            nback(j).connection_matrix(3, sl_i).pearson = myresult.nback(3).pearson;
            nback(j).connection_matrix(4, sl_i).pearson = myresult.nback(4).pearson; 
            
            clear myresult

			% cycle through sessions
            for session = 1 : 4

                disp(['session: ', int2str(session), '; slide option: ',...
                    int2str(sl_i)])
				
				% number of analytical windows - sliding window approach
                nw = length(slide(sl_i, 1) : slide(sl_i, 2) : ...
                    size(chromofor(ID2(j)).nback(session).hbt_bpfilt, 1)); 
				
				% cycle through windows - calculation of network metrics time series
				
                for inw = 1 : nw 
					
					% local binary node degree
                    dfc_temp.nback(session, ...
                        sl_i).density_bu.local(:, inw) = ...
                        degrees_und(nback(j).connection_matrix(session, ...
                        sl_i).pearson(:, :, inw)) ./ alany(ID2(j)).NCh;

					% global binary node degree
                    [dfc_temp.nback(session, ...
                        sl_i).density_bu.global(inw), ~, ~] = ...
                        density_und(nback(j).connection_matrix(session, ...
                        sl_i).pearson(:, :, inw)); 

					% local weighted node degree
                    [dfc_temp.nback(session, ...
                        sl_i).density_wu.local(:, inw)] = ...
                        strengths_und(nback(j).connection_matrix(session, ...
                        sl_i).pearson(:, :, inw)) ./ alany(ID2(j)).NCh;

					% global weighted node degree
                    dfc_temp.nback(session, ...
                        sl_i).density_wu.global(inw) = ...
                        mean(dfc_temp.nback(session, ...
                        sl_i).density_wu.local(:, inw));

                    temp_bin = double(nback(j).connection_matrix(session, ...
                        sl_i).pearson(:, :, inw)~=0);

					% local binary clustering coefficient
                    dfc_temp.nback(session, ...
                        sl_i).clustering_bu.local(:, inw) = ...
                        clustering_coef_bu(temp_bin);                                
					
					% global binary clustering coefficient
                    dfc_temp.nback(session, ...
                        sl_i).clustering_bu.global(inw) = ...
                        mean(dfc_temp.nback(session, ...
                        sl_i).clustering_bu.local(:, inw));

					% local weighted clustering coefficient
                    dfc_temp.nback(session, ...
                        sl_i).clustering_wu.local(:, inw) = ...
                        clustering_coef_wu(nback(j).connection_matrix(session,...
                        sl_i).pearson(:, :, inw));
						
					% global weighted clustering coefficient
                    dfc_temp.nback(session, ...
                        sl_i).clustering_wu.global(inw) = ...
                        mean(dfc_temp.nback(session, ...
                        sl_i).clustering_wu.local(:, inw));

					% local binary efficiency
                    dfc_temp.nback(session, ...
                        sl_i).efficiency_bu.local(:, inw) = ...
                        efficiency_bin(temp_bin, 1);
					% global binary efficiency
                    dfc_temp.nback(  session, ...
                        sl_i).efficiency_bu.global(inw) = ...
                        efficiency_bin(temp_bin);

					% local weighted efficiency
                    dfc_temp.nback(session, ...
                        sl_i).efficiency_wu.local(:, inw) = ...
                        efficiency_wei(temp_bin, 1);
					% global weighted efficiency
                    dfc_temp.nback(session, ...
                        sl_i).efficiency_wu.global(inw) = ...
                        efficiency_wei(temp_bin);

                end

                %%% Analysis of dynamic functional connectivity - Mean %%%

				% local binary node degree
                dfc(j).nback(session, ...
                    sl_i).density_bu.local.Mean = ...
                    mean(dfc_temp.nback(session, ...
                    sl_i).density_bu.local);

				% global binary node degree
                dfc(j).nback(session, ...
                    sl_i).density_bu.global.Mean = ...
                    mean(dfc_temp.nback(session, ...
                    sl_i).density_bu.global);

				% local weighted node degree
                dfc(j).nback(session, ...
                    sl_i).density_wu.local.Mean = ...
                    mean(dfc_temp.nback(session, ...
                    sl_i).density_wu.local);

				% global weighted node degree
                dfc(j).nback(session, ...
                    sl_i).density_wu.global.Mean = ...
                    mean(dfc_temp.nback(session, ...
                    sl_i).density_wu.global);

				% local binary clustering coefficient
                dfc(j).nback(session, ...
                    sl_i).clustering_bu.local.Mean = ...
                    mean(dfc_temp.nback(session, ...
                    sl_i).clustering_bu.local);

				% global binary clustering coefficient
                dfc(j).nback(session, ...
                    sl_i).clustering_bu.global.Mean = ...
                    mean(dfc_temp.nback(session, ...
                    sl_i).clustering_bu.global);

				% local weighted clustering coefficient
                dfc(j).nback(session, ...
                    sl_i).clustering_wu.local.Mean = ...
                    mean(dfc_temp.nback(session, ...
                    sl_i).clustering_wu.local);

				% global weighted clustering coefficient
                dfc(j).nback(session, ...
                    sl_i).clustering_wu.global.Mean = ...
                    mean(dfc_temp.nback(session, ...
                    sl_i).clustering_wu.global);

				% local binary efficiency
                dfc(j).nback(session, ...
                    sl_i).efficiency_bu.local.Mean = ...
                    mean(dfc_temp.nback(session, ...
                    sl_i).efficiency_bu.local);

				% global binary efficiency
                dfc(j).nback(session, ...
                    sl_i).efficiency_bu.global.Mean = ...
                    mean(dfc_temp.nback(session, ...
                    sl_i).efficiency_bu.global);

				% local weighted efficiency
                dfc(j).nback(session, ...
                    sl_i).efficiency_wu.local.Mean = ...
                    mean(dfc_temp.nback(session, ...
                    sl_i).efficiency_wu.local);

				% global weighted efficiency
                dfc(j).nback(session, ...
                    sl_i).efficiency_wu.global.Mean = ...
                    mean(dfc_temp.nback(session, ...
                    sl_i).efficiency_wu.global);
					
					

                %%% Analysis of dynamic functional connectivity - Variance %%%

				% local binary node degree
                dfc(j).nback(session, ...
                    sl_i).density_bu.local.Var = ...
                    var(dfc_temp.nback(session, ...
                    sl_i).density_bu.local, 0, 2);

				% global binary node degree
                dfc(j).nback(session, ...
                    sl_i).density_bu.global.Var = ...
                    var(dfc_temp.nback(session, ...
                    sl_i).density_bu.global);

				% local weighted node degree
                dfc(j).nback(session, ...
                    sl_i).density_wu.local.Var = ...
                    var(dfc_temp.nback(session, ...
                    sl_i).density_wu.local, 0, 2);

				% global weighted node degree
                dfc(j).nback(session, ...
                    sl_i).density_wu.global.Var = ...
                    var(dfc_temp.nback(session, ...
                    sl_i).density_wu.global);

				% local binary clustering coefficient
                dfc(j).nback(session, ...
                    sl_i).clustering_bu.local.Var = ...
                    var(dfc_temp.nback(session, ...
                    sl_i).clustering_bu.local, 0, 2);

				% global binary clustering coefficient
                dfc(j).nback(session, ...
                    sl_i).clustering_bu.global.Var = ...
                    var(dfc_temp.nback(session, ...
                    sl_i).clustering_bu.global);

				% local weighted clustering coefficient
                dfc(j).nback(session, ...
                    sl_i).clustering_wu.local.Var = ...
                    var(dfc_temp.nback(session, ...
                    sl_i).clustering_wu.local, 0, 2);

				% global weighted clustering coefficient
                dfc(j).nback(session, ...
                    sl_i).clustering_wu.global.Var = ...
                    var(dfc_temp.nback(session, ...
                    sl_i).clustering_wu.global);

				% local binary efficiency
                dfc(j).nback(session, ...
                    sl_i).efficiency_bu.local.Var = ...
                    var(dfc_temp.nback(session, ...
                    sl_i).efficiency_bu.local, 0, 2);

				% global binary efficiency
                dfc(j).nback(session, ...
                    sl_i).efficiency_bu.global.Var = ...
                    var(dfc_temp.nback(session, ...
                    sl_i).efficiency_bu.global);

				% local weighted efficiency
                dfc(j).nback(session, ...
                    sl_i).efficiency_wu.local.Var = ...
                    var(dfc_temp.nback(session, ...
                    sl_i).efficiency_wu.local, 0, 2);

				% global weighted efficiency
                dfc(j).nback(session, ...
                    sl_i).efficiency_wu.global.Var = ...
                    var(dfc_temp.nback(session, ...
                    sl_i).efficiency_wu.global);




                clear temp_bin nw

            end
            
        end
    
    try
        save([pwd, '.\', mydir, '\', 'fConn_CN', int2str(ID(j)), '_', fltn, '-dwt'], ...
            'dfc_temp')    
    catch
        save([pwd, '.\', mydir, '\', 'fConn_CN', int2str(ID(j)), '_', fltn, '-dwt'], ...
            'dfc_temp', '-v7.3')
    end
    clear dfc_temp connection_matrix
        
    catch ME
        
        alany(ID2(j)).hiba = ME;
        
        try
            save([pwd, '.\', mydir, '\', 'fConn_CN', int2str(ID2(j)), '_', fltn, '-dwt'], ...
                'dfc_temp')    
        catch
            try
                save([pwd, '.\', mydir, '\', 'fConn_CN', int2str(ID2(j)), '_', fltn, '-dwt'], ...
                    'dfc_temp', '-v7.3')
            end
        end
        
        clear dfc_temp connection_matrix
        
        continue
    end
end

try
    save('DFC-Results_nback', ...
        'nback')    
catch
    save('DFC-Results_nback', ...
        'nback', '-v7.3')
end
